{
  "name": "grunt-jsbeautifier",
  "description": "jsbeautifier.org for grunt",
  "version": "0.2.7",
  "homepage": "https://github.com/vkadam/grunt-jsbeautifier",
  "author": {
    "name": "Vishal Kadam",
    "email": "vishal.4kadam@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/vkadam/grunt-jsbeautifier.git"
  },
  "bugs": {
    "url": "https://github.com/vkadam/grunt-jsbeautifier/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/vkadam/grunt-jsbeautifier/blob/master/LICENSE-MIT"
    }
  ],
  "engines": {
    "node": ">=0.8"
  },
  "dependencies": {
    "grunt": "~0.4.1",
    "js-beautify": "~1.4.2",
    "lodash": "~2.4.1",
    "underscore.string": "~2.3.3",
    "stringformat": "0.0.5"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.7.2",
    "grunt-contrib-nodeunit": "~0.2.2",
    "grunt-contrib-copy": "~0.4.1",
    "grunt-contrib-clean": "~0.5.0"
  },
  "scripts": {
    "test": "grunt test -v"
  },
  "keywords": [
    "gruntplugin",
    "beautify",
    "beautifier",
    "jsbeautifier",
    "code-quality",
    "javascript beautify",
    "html beautify",
    "css beautify",
    "json beautify"
  ],
  "readme": "# grunt-jsbeautifier [![Build Status](https://travis-ci.org/vkadam/grunt-jsbeautifier.png)](https://travis-ci.org/vkadam/grunt-jsbeautifier)\r\n\r\n[jsbeautifier.org](http://jsbeautifier.org/) for grunt\r\n\r\n## Getting Started\r\nThis plugin recommends using Grunt `~0.4.1`. Grunt `~0.3.0` is only suported till version 0.1.4\r\n\r\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\r\n\r\n### Grunt `~0.4.1`\r\n```\r\nnpm install grunt-jsbeautifier --save-dev\r\n```\r\n\r\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\r\n\r\n```\r\ngrunt.loadNpmTasks('grunt-jsbeautifier');\r\n```\r\n\r\n### Grunt `~0.3.0`\r\nInstall this grunt plugin next to your project's [grunt.js gruntfile][getting_started] with:\r\n\r\n```\r\nnpm install grunt-jsbeautifier@0.1.4\r\n```\r\n\r\nThen add this line to your project's `grunt.js` gruntfile:\r\n\r\n```\r\ngrunt.loadNpmTasks('grunt-jsbeautifier');\r\n```\r\n\r\n[grunt]: http://gruntjs.com/\r\n[getting_started]: https://github.com/gruntjs/grunt/blob/master/docs/getting_started.md\r\n\r\n## Examples\r\n\r\n### Single Task\r\n  - files (required): Your source files to beautify\r\n  - options (optional): Overwrite default jsbeautifier options\r\n\r\n```javascript\r\n\"jsbeautifier\" : {\r\n    files : [\"src/**/*.js\"],\r\n    options : {\r\n    }\r\n}\r\n```\r\n\r\n### Multi Task\r\n  - src (required): Your source files to beautify\r\n  - options (optional): Overwrite default jsbeautifier options\r\n\r\n```javascript\r\n\"jsbeautifier\" : {\r\n    \"default\": {\r\n        src : [\"src/**/*.js\"]\r\n    },\r\n    \"git-pre-commit\": {\r\n        src : [\"src/**/*.js\"],\r\n        options : {\r\n            mode:\"VERIFY_ONLY\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Config\r\n\r\n#### files\r\nType: `Files`\r\nDefault value: `[]`\r\n\r\nList of files to be beautified. This option is applicable only for **Single Task**\r\n\r\n#### src\r\nType: `Files`\r\nDefault value: `[]`\r\n\r\nList of files to be beautified. This option is applicable only for **Multi Task**\r\n\r\n#### mode (optional)\r\nType: `String`\r\nDefault value: `VERIFY_AND_WRITE`\r\n\r\nIf mode is \"VERIFY_ONLY\", then task will fail if at least one file can be beautified. This is useful for pre-commit check.\r\n\r\n#### config (optional)\r\nType: `String`\r\n\r\nThe file path (relative to your process's cwd) to the config file. This is usually in `JSON` format, like the one supported by js-beautify itself\r\n\r\n### Default options from [js-beautify](https://github.com/einars/js-beautify#options) can be used\r\n```javascript\r\n  \"jsbeautifier\": {\r\n      files: [\"src/**/*.js\"],\r\n      options: {\r\n          config: \"path/to/configFile\",\r\n          // Called after the beautify has been done on a file.\r\n          // parameters of the callback\r\n          // content ==> the beautified content, which should be returned \r\n          // from the function after applying some transformation if required.\r\n          //\r\n          // the args is an object with the following fields\r\n          // args.file ==> the path to the file\r\n          // args.config ==> the config used to call to js-beautify\r\n          // args.params ==> the parameters passed to jsbeautifier\r\n          //\r\n          // returns a string. This content is going to be saved to file\r\n          onBeautified : function (content, args){\r\n            // modify the beautified content to match our custom style guidelines\r\n            // or to fix some js-beautify bug\r\n            // return content.replace(/!!\\s/g, function () {\r\n            //  grunt.log.writeln('replacing \"!! \" with \"!!');\r\n            //  return '!!';\r\n            // });\r\n            return content;\r\n          },\r\n          // Called when the validation fails when the mode is VERIFY_ONLY.\r\n          // parameters of the callback\r\n          // content ==> the beautified content.\r\n\r\n          // the args is an object with the following fields\r\n          // args.file ==> the path to the file\r\n          // args.config ==> the config used to call to js-beautify\r\n          // args.params ==> the parameters passed to jsbeautifier\r\n          // returns nothing\r\n          onVerificationFailed : function (content, args) {\r\n            // doSomething to let your users know that some file has failed validation\r\n            // for example\r\n            grunt.log.warn('the file ===> ' + args.file + ' needs beautification, run grunt jsbeautifier --mode=\"VERIFY_AND_WRITE\"');\r\n          },\r\n          html: {\r\n              braceStyle: \"collapse\",\r\n              indentChar: \" \",\r\n              indentScripts: \"keep\",\r\n              indentSize: 4,\r\n              maxPreserveNewlines: 10,\r\n              preserveNewlines: true,\r\n              unformatted: [\"a\", \"sub\", \"sup\", \"b\", \"i\", \"u\"],\r\n              wrapLineLength: 0\r\n          },\r\n          css: {\r\n              indentChar: \" \",\r\n              indentSize: 4\r\n          },\r\n          js: {\r\n              braceStyle: \"collapse\",\r\n              breakChainedMethods: false,\r\n              e4x: false,\r\n              evalCode: false,\r\n              indentChar: \" \",\r\n              indentLevel: 0,\r\n              indentSize: 4,\r\n              indentWithTabs: false,\r\n              jslintHappy: false,\r\n              keepArrayIndentation: false,\r\n              keepFunctionIndentation: false,\r\n              maxPreserveNewlines: 10,\r\n              preserveNewlines: true,\r\n              spaceBeforeConditional: true,\r\n              spaceInParen: false,\r\n              unescapeStrings: false,\r\n              wrapLineLength: 0\r\n          }\r\n      }\r\n  },\r\n```\r\nOnly specifiy options to overwrite.\r\n\r\n**NOTE:** All options can be specified similar to [js-beautify](https://github.com/einars/js-beautify#options) using underscore.\r\n\r\n\r\n### FAQ/Tips\r\n#### 1. Exclude files\r\nAll files from foo folder except bar.js\r\n```javascript\r\njsbeautifier: {\r\n    files: ['foo/*.js', '!foo/bar.js']\r\n}\r\n```\r\n#### 2. Use specific version of js-beautify\r\nIf you want use specific version of js-beautify instead of latest, please refer to [npm shrinkwrap](https://npmjs.org/doc/shrinkwrap.html)\r\n\r\n#### 3. Beautify files other than js, json, css & html\r\nIf you need to beautify files other than js, json, css & html, it can be done by passing **fileTypes**.\r\n\r\nFor example, beautifying **'.js.erb'** files **along with '.js'**, beautifying **'.less'** files **along with '.css'**, beautifying **'.html.erb'** files **along with '.html'**.\r\n```\r\njsbeautifier: {\r\n    files: ['foo/css/*.css', 'bar/css/*.less', 'foo/js/*.js', 'bar/js/*.js.erb', 'foo/html/*.html', 'bar/html/*.html.erb'],\r\n    options: {\r\n        js: {\r\n            fileTypes: ['.js.erb']\r\n        },\r\n        css: {\r\n            fileTypes: ['.less']\r\n        },\r\n        html: {\r\n            fileTypes: ['.html.erb']\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Release History\r\n* 0.2.5: Added two callbacks onBeautified and onValidationFailed to support modifying the beautified output and display custom errors on failure. Also use more specific version of dependencies.\r\n* 0.2.4: Support custom file types other than js, json, css & html. Use latest versions for dependencies [23](https://github.com/vkadam/grunt-jsbeautifier/issues/23), [26](https://github.com/vkadam/grunt-jsbeautifier/issues/26)\r\n* 0.2.3: Always use latest version of js-beautify. [21](https://github.com/vkadam/grunt-jsbeautifier/issues/21)\r\n* 0.2.2: Configuration is now lint happy. Options can be specified in cameCase, [17](https://github.com/vkadam/grunt-jsbeautifier/issues/17)\r\n* 0.2.1: Added Support for flat config file\r\n* 0.2.0: Added support for css, html and json files\r\n* 0.1.10: Added verify only mode [15](https://github.com/vkadam/grunt-jsbeautifier/issues/15). This will fail if any file needs beautification.\r\n* 0.1.9: Upgraded [js-beautify](https://npmjs.org/package/js-beautify) to 1.4.0. Fixed issues [13](https://github.com/vkadam/grunt-jsbeautifier/issues/13)\r\n* 0.1.8: Upgraded [js-beautify](https://npmjs.org/package/js-beautify) to ~1.3.1. Fixed issues [10](https://github.com/vkadam/grunt-jsbeautifier/issues/10), [12](https://github.com/vkadam/grunt-jsbeautifier/issues/12)\r\n* 0.1.7: Upgraded grunt to ~0.4.1, [js-beautify](https://npmjs.org/package/js-beautify) to ~1.2.0. Fixed issues [6](https://github.com/vkadam/grunt-jsbeautifier/issues/6), [7](https://github.com/vkadam/grunt-jsbeautifier/issues/7), [8](https://github.com/vkadam/grunt-jsbeautifier/issues/8), [9](https://github.com/vkadam/grunt-jsbeautifier/issues/9)\r\n* 0.1.6: Make sure new line at the end of file. Fixed issue [5](https://github.com/vkadam/grunt-jsbeautifier/issues/5)\r\n* 0.1.5: Upgraded to grunt ~0.4.0. Fixed issues [2](https://github.com/vkadam/grunt-jsbeautifier/issues/2), [3](https://github.com/vkadam/grunt-jsbeautifier/issues/3), [4](https://github.com/vkadam/grunt-jsbeautifier/issues/4)\r\n* 0.1.4: Upgraded [js-beautify](https://npmjs.org/package/js-beautify) to latest version (0.3.2)\r\n* 0.1.3: Added fix for block comment formatting.\r\n* 0.1.2: Supported grunt 0.4~.\r\n* 0.1.1: Readme file changes\r\n* 0.1.0: Initial version.\r\n\r\n## License\r\nCopyright (c) 2012 Vishal Kadam\r\nLicensed under the MIT license.",
  "readmeFilename": "README.md",
  "_id": "grunt-jsbeautifier@0.2.7",
  "_shasum": "9ace5f2fa45dc40cd837c6276bfa2ed76d55f46b",
  "_resolved": "git://github.com/royriojas/grunt-jsbeautifier#91ea5981441e9d3f921c449b5972634cc53ed359",
  "_from": "grunt-jsbeautifier@git://github.com/royriojas/grunt-jsbeautifier"
}
